import Foundation

//–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥, —á—Ç–æ –±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
let optional: Int? = 7
let nonOptional: Int = optional! //–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    //–≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–Ω–∞—Ç
let optional2: Int = 7 //—ç—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∏ –µ–µ –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–Ω–æ —Ç–æ—á–Ω–æ –Ω–µ –æ–ø—Ü–∏–æ–Ω–∞–ª
let nonOptinal2: Int? = optional2 //–º—ã –Ω–µ –∑–Ω–∞–µ–º –Ω–∞–≤—è—Ä–Ω—è–∫–∞(–ø—É—Å—Ç—å) —á—Ç–æ optional2 != nil
//–ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫–∏
var name: String? = "Test"
var age: Int? = nil //nil –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—ç—Ç–æ–º—É Int?
let distance: Float = 26.7
var middleName: String? = nil
    //–í–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–Ω–∞—Ç
let name2: String = "Test"
//–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ number —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
let number: Int??? = 10
    //1 —Å–ø–æ—Å–æ–± (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ)
let number1 = number!!!
    //2 —Å–ø–æ—Å–æ–± (–Ω–µ—è–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ)
if let number2 = number {
    if let number21 = number2 {
        if let number22 = number21 {
            number22 //number22 = 10
        }
    }
}
//–ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 15 –Ω–∞ 17 –≤ –º–∞—Å—Å–∏–≤–µ
var numbers = [4, 8, 15, 16, 23, 42]
    //1 —Å–ø–æ—Å–æ–±, –µ—Å–ª–∏ –º—ã –∑–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å
numbers[2] = 17
numbers
    //2 c–ø–æ—Å–æ–±, –ø—Ä–æ–±–µ–≥
numbers[2] = 15
for (index, value) in numbers.enumerated() {
    if value == 15 {
        numbers[index] = 17
    }
}
numbers
//–Ω–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫–∏
let array1 = [Int]()
//let array2 = [] –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω —Ç–∏–ø –º–∞—Å—Å–∏–≤–∞
let array3: [String] = []

let array4 = [1, 2, 3]
print(array4[0])
//print(array4[5]) –≤ –º–∞—Å—Å–∏–≤–µ –ª–∏—à—å 3(2) —ç–ª–µ–º–µ–Ω—Ç–∞
array4[1...2]
//array4[0] = 4 let –∏—Å–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏—Å–æ–≤–µ–Ω–∏–µ
//array4.append(4) let –∏—Å–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ

var array5 = [1, 2, 3]
array5[0] = array5[1]
//array5[0...1] = [4, 5]
//array5[0] = "Six" –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–≤–æ–∏—Ç—å Int String
//array5 += 6 –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Ç–∞–∫–æ–≥–æ, –∞ –Ω–µ –≤–µ—Å—å –º–∞—Å—Å–∏–≤
for item in array5 { print(item) }

//let dict1: [Int, Int] = [:] –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—Ç–µ—Ä–∞–ª : –≤ —Ç–∏–ø–µ –∞ –Ω–µ –ø–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ,
//let dict2 = [:] –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø
let dict3: [Int: Int] = [:]

let dict4 = ["One": 1, "Two": 2, "Three": 3]
//dict4[1] –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –∫–ª—é—á—É
dict4["One"]
//dict4["Zero"] = 0 —Ç–∫ let
//dict4[0] = "Zero" –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –∫–ª—é—á—É

var dict5 = ["NY": "New York", "CA": "california"]
dict5["NY"]
dict5["WA"] = "Wachington"
dict5["CA"] = nil
//–ù–∞–π–¥–∏—Ç–µ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏—Ö, –Ω–æ –Ω–µ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤
let houseAnimals: Set = ["üê∂", "üê±"]
let farmAnimals: Set = ["üêÆ", "üêî", "üêë", "üê∂", "üê±"]
farmAnimals.symmetricDifference(houseAnimals)
//–°–¥–µ–ª–∞–π—Ç–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
let appRatings = [
    "Calendar Pro": [1, 5, 5, 4, 2, 1, 5, 4],
    "The Messenger": [5, 4, 2, 5, 4, 1, 1, 2],
    "Socialise": [2, 1, 2, 2, 1, 2, 4, 2]
]
var middleAppRatings: [String: Double] = [:]
for keys in appRatings.keys {
    var middle: Double = 0
    if (appRatings[keys]?.isEmpty)! { //–µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç
        middleAppRatings[keys] = 0
    } else {
        for value in (appRatings[keys])! {
            middle += Double(truncating: value as NSNumber) //–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ Int
        }
        middleAppRatings[keys] = middle / Double(appRatings[keys]!.count)
    }
}
middleAppRatings //c–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
//–ø–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤—ã—à–µ 3
var moreThanThree = String()
for (keys, value) in middleAppRatings {
    if value >= 3 {
        moreThanThree += keys + ", "
    }
}
moreThanThree.removeSubrange(moreThanThree.index(moreThanThree.endIndex, offsetBy: -2)..<moreThanThree.endIndex) //–Ω–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2-—Ö —Å–∏–º–≤–æ–ª–æ–≤
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ "–ü—Ä–∏–≤–µ—Ç, " –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    //1 –≤–∞—Ä–∏–Ω–∞—Ç
func hello(_ sameStr: String) {
    print("–ü—Ä–∏–≤–µ—Ç, "+sameStr)
}
hello("–¢–æ–º")
    //2–≤–∞—Ä–∏–Ω—Ç
func hay(_ sameStr: String) {
    let str = "–ü—Ä–∏–≤–µ—Ç, " + sameStr
    print(str)
}
hay("Tom")
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –≤–∏–¥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
func greeting(_ name: String, _ surname: String) {
    hello(name+" "+surname)
}
greeting("Tom", "Darwood")
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–ø–∞ int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É
func sum(_ numbers: Int...) -> Int {
    var total: Int = 0
    for number in numbers {
        total += number
    }
    return total
}
sum(1, 5, 5, 4, 2, 1, 5, 4)
//–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—á–∞—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "–ü—Ä–∏–≤–µ—Ç" –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ —ç—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –í—ã–∑–æ–≤–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ
    //1 –≤–∞—Ä–∏–Ω—Ç
let regards = { print("Hello")}
regards()
//–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É. –ü—Ä–∏—Å–≤–æ–π—Ç–µ —ç—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –µ–≥–æ
let theAmount = {(_ a : Int, _ b : Int) -> Int in
    return a + b
}
let amount = theAmount(3, 4)
//–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ [16, 8, 15, 42, 4, 23] –ø–æ —É–±—ã–≤–∞–Ω–∏—é
var sortArray = [16, 8, 15, 42, 4, 23]
sortArray = sortArray.sorted(by: >)
//–ò–∑ –º–∞—Å—Å–∏–≤–∞ [16, 8, 15, 42, 4, 23] —Å–¥–µ–ª–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ —Å —á–∏—Å–ª–∞–º–∏ –±–æ–ª—å—à–µ 10
var moreArray = [16, 8, 15, 42, 4, 23]
    //1 —Å–ø–æ—Å–æ–±: remove
var index = 0;
for value in moreArray {
    if value < 10 {
        print(index)
        moreArray.remove(at: index)
    } else {
        index += 1
    }
}
moreArray
    //2 c–ø–æ—Å–æ–±: func
moreArray = [16, 8, 15, 42, 4, 23]
func moreTen(_ numbers: [Int]) -> [Int] {
    var moreTenArray: [Int] = []
    for number in numbers {
        if number > 10 {
            moreTenArray.append(number)
        }
    }
    return moreTenArray
}
moreArray = moreTen(moreArray)
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –µ–≥–æ
func arithmeticOperation(_ a: Int, _ b: Int, _ action: (Int, Int) -> Int) -> Int{
    return action(a, b)
}
let result = arithmeticOperation(10, 20, +)
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —á—Ç–æ-—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
func backWrite(_ str: String, _ write: (String) -> ()) {
    write(str)
}
backWrite("Hello", {(str: String) in print(str)})
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑
func backWriteNext(_ str: String, _ a: Int, _ write: (String) -> ()){
    for _ in 1...a {
        write(str)
    }
}
backWriteNext("Hay", 3, {(str: String) in print(str)})
//–£–±–µ—Ä–∏—Ç–µ —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏
class Employee {
    weak var computer: Computer? //Employee.computer -> (weak) Computer.employee
    deinit {
        print("Employee is denit")
    }

}
class Computer {
    var employee: Employee? //Employee.computer <- Computer.employee
    deinit {
        print("Computer is denit")
    }
}

var employee: Employee? = Employee() //employee = Employee.computer
var computer: Computer? = Computer() //computer = Computer.employee
employee?.computer = computer //Employee.computer = Computer.employee —Ü–∏–∫–ª —Å–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω —Å–ª–∞–±—ã–º–∏
computer?.employee = employee //Computer.employee = Employee.computer
computer = nil //—Ç–µ–ø–µ—Ä—å –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è
employee = nil
//–£–±–µ—Ä–∏—Ç–µ —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏
class Counter {
    var value = 0
    lazy var increase = { //–∑–∞–º—ã–∫–∞–Ω–∏–µ
        [unowned self] in //–¥–æ–±–∞–≤–ª—è–µ–º –±–µ—Å—Ö–æ—Å–∑–Ω—É—é –∏–ª–∏ —Å–ª–∞–±—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–∏–ª—å–Ω–æ–π, –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞
        self.value += 1
    }
    deinit {
        print("Counter is denit")
    }
}
var counterIncrease: Counter? = Counter() //–≤—ã–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å Counter
counterIncrease = nil //–æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
//–ù–∞–ø–∏—à—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –ª—é–±–æ–º –∏–∑ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤, –ª–∏–±–æ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
let animals1 = ["dog", "cat", "bird", "pig"]
let animals2 = ["turtle", "snake", "lizard", "shark"]
func sendAnimals(_ animal1: [String], _ animal2: [String], _ someAnimal: String) -> Bool {
    if animal1.index(of: someAnimal) != nil || animal2.index(of: someAnimal) != nil { //–∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        return true //–µ—Å–ª–∏ –Ω–∞—à–ª–∏ –≤–µ—Ä–Ω—è—Ç—å true
    }
    return false //–µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ false
}
sendAnimals(animals1, animals2, "snake")
//–Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
func factorial(_ n: Int) -> Int? { //–ø—Ä–∏–≤—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –±–µ–∑ —É—á–µ—Ç–∞ –≥–∞–º–º–∞-—Ñ—É–Ω–∫—Ü–∏–∏
    if n == 0 {
        return 1
    }
    if n <= 0 {
        print("Negative number")
        return nil
    }
    return n * factorial(n - 1)!
}
factorial(3)
//–Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∞—Å—Å–∏–≤–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ü–∏—Ñ—Ä–∞ 2
let array: [Int?] = [2, 4, 5, 5, 2, 5, 5, 5]
func howManyTwo (_ array: [Int?]) -> Int {
    var counter = 0
    if array.isEmpty { //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –º–∞—Å—Å–∏–≤–∞
        return 0
    }
    for element in array { //–ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è
        if element == 2 { //–µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
            counter += 1
        }
    }
    return counter
}
howManyTwo(array)
//–Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å–ª–∏ –ª–∏ —Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ —Ü–∏—Ñ—Ä–∞ 2
func howManyTwoIsThree (_ array: [Int?]) -> Bool {
    if array.isEmpty { //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
        return false
    }
    if array.count > 3 && array[0...2].index(of: 2) != nil { //–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
        return true
    }
    if array.index(of: 2) != nil { //–µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º 2 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
        return true
    }
    return false
}
howManyTwoIsThree(array)
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –∫–æ—Ç–æ—Ä–æ–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã 5 –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä—è–¥–æ–º –≤ –º–∞—Å—Å–∏–≤–µ
func fiveNear (_ array: [Int?]) -> Int {
    var counter = 0
    for index in 0..<array.count-1 { //–±–µ–∂–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É
        if array[index] == 5 && array[index] == array[index + 1] { //–∏ —Å—á–∏—Ç–∞–µ–º
            counter += 1
        }
    }
    return counter
}
fiveNear(array)
